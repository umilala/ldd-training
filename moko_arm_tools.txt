1. unzip kernel

	tar jxvf kernel-jk2410-rmk7-pxa1-mz5.tar.bz2

2. unzip toolchain to root (kernel toolschain)

	cd /
	sudo tar zxvf /disk0/moko_20120211/moko365-ldd-pack/arm-linux-toolchains.tgz


3. enter the kernel path

	cd /disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410

4. check the Makefile (in kernel-jk2410)

ARCH := arm
CROSS_COMPILE 	= /usr/local/arm/2.95.3/bin/arm-linux-

5. make menuconfig
Character devices
  │ │[ ] Jollen-Kit! Pro. GPIO buttons support                            │ │  
  │ │[ ] Jollen-Kit! Pro. LEDs support  


6. make dep
7. make Image -j8 (default)
	or 
	   make zImage (zip image)
	or 
	   make bImage (if > 4MB)
	or
	   make bzImage (if > 4MB and zip image)


8. check out file
	/disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410/vmlinux (elf format)
	/disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410/arch/arm/boot/Image (target image)


9. tar zxvf jk2410-codesuite-read-only.tar.gz (emulator)

/disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt (emulator)


10. 
Ignore this part....
edit /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt/run.sh 

org:
arm-softmmu/qemu-system-arm -M neo -m 130 -mtdblock jk2410/jk2410-flash.image -kernel jk2410/uimage.img -initrd jk2410/urootfs-lcd.img -usb -show-cursor -serial stdio -s

#arm-softmmu/qemu-system-arm -M neo -m 130 -mtdblock jk2410/jk2410-flash.image -kernel /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt/uimage.img -initrd jk2410/urootfs-lcd.img -usb -show-cursor -serial stdio -s


JK2410: CPU FCLK = 200000000
JK2410: CPU UCLK = 48000000
JK2410: CPU HCLK = 100000000

JK2410: CPU PCLK = 50000000
jollen.org # ls
mtdids not defined, no default present
jollen.org # 


11. QEMU reference:
	http://wiki.qemu.org/Main_page

12. create rootfs system (using rootfs toolchain)

	cd /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only

	a. unzip toolschain
		sudo tar zxvf /disk0/moko_20120211/moko365-ldd-pack/arm-9tdmi-linux-gnu.tar.gz
		output will be 
			/opt/crosstool/gcc-3.4.1-glibc-2.3.3/arm-9tdmi-linux
	b. generate rootfs
		sudo make rootfs	(for creating /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/urootfs-lcd.img)

12. run emulator
/disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt/run.sh 

jollen.org # 
set bootargs root=/dev/ram0 rw console=ttyS0,115200 mem=64M ramdisk=16384; bootm 30f00000 32000000


13. gen uboot image (save it as gen_uimage.sh)
	a. copy mkimage
		copy mkimage to your .../disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410 (from /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs)
	b. create uboot image
		cd /disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410
		./mkimage -A arm -O linux -T kernel -C none -a 30008000 -e 30008000 -d arch/arm/boot/Image uimage.img

	c. copy the image into your emulator
		cp uimage.img /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt/jk2410/

-->
	RUN emulator:
		/disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/qemu-jk2410-prebuilt/run.sh
	GEN IMAGE
		/disk0/moko_20120211/moko365-ldd-pack/kernel-jk2410/gen_uimage.sh

14. copy cdata into kernel (build cdata into kernel/drivers/char)
	then gedit Makefile
	obj-y += cdata.o


check symbol in System.map

15. for test program on the rootfs
a. copy test.c into /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/
	or 	ln -s yourfolder/test.c
b. edit /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/Makefile
	$(CC) -o test test.c	
c. edit /disk0/moko_20120211/moko365-ldd-pack/jk2410-codesuite-read-only/rootfs/Makefile
	@cp ../test rootfs/bin/
d. sudo make rootfs

16. test on the emulator
a. mknod /dev/cdata c 121 0



20120218

1. open emulator (240x320)
fill screen with red color without boot kernel (mw.l -->write long byte)
mw.l 0x33f00000 0x00ff0000 10000

2. write clear screen on cdata_init_module
	but no effect
3. try to disable driver
	make menuconfig
		disable console/framebuffer/Support fro frame buffer devices
	but screen is wrong(with ramdom color)


4. change the ram config range in bootargs (64M -> 60, avoid overwrite framebuffer range)
set bootargs root=/dev/ram0 rw console=ttyS0,115200 mem=60M ramdisk=16384; bootm 30f00000 32000000

5. 
static int cdata_init_module(void)
{

	unsigned long *fd;
	int i;
	fd = ioremap(0x33f00000, 320*240*4);
	for (i=0; i< 320*240; i++) {
		writel(0x00ff0000, fd++);	//
	}

6. the screen should be red 

